# coding: utf-8

"""
    Signalen API

    One of the tasks of a municipality is to maintain public spaces. When citizens have complaints about public spaces they can leave these complaints with the municipality. Signalen (SIG) receives these complaints and is used to track progress towards their resolution. SIG provides an API that is used both by the SIG frontend and external systems that integrate with SIG.

    The version of the OpenAPI document: 2.41.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from signals_api_client.models.nested_location_model_geometrie import NestedLocationModelGeometrie
from signals_api_client.models.stadsdeel_enum import StadsdeelEnum
from typing import Optional, Set
from typing_extensions import Self

class NestedLocationModel(BaseModel):
    """
    NestedLocationModel
    """ # noqa: E501
    id: StrictInt
    stadsdeel: Optional[StadsdeelEnum] = None
    buurt_code: Optional[Annotated[str, Field(strict=True, max_length=4)]] = None
    area_type_code: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None
    area_code: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None
    area_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None
    address: Optional[Any] = None
    address_text: Optional[StrictStr]
    postcode: Optional[StrictStr]
    geometrie: NestedLocationModelGeometrie
    extra_properties: Optional[Any] = None
    created_by: Optional[StrictStr]
    bag_validated: StrictBool
    __properties: ClassVar[List[str]] = ["id", "stadsdeel", "buurt_code", "area_type_code", "area_code", "area_name", "address", "address_text", "postcode", "geometrie", "extra_properties", "created_by", "bag_validated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NestedLocationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "address_text",
            "postcode",
            "created_by",
            "bag_validated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if stadsdeel (nullable) is None
        # and model_fields_set contains the field
        if self.stadsdeel is None and "stadsdeel" in self.model_fields_set:
            _dict['stadsdeel'] = None

        # set to None if buurt_code (nullable) is None
        # and model_fields_set contains the field
        if self.buurt_code is None and "buurt_code" in self.model_fields_set:
            _dict['buurt_code'] = None

        # set to None if area_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.area_type_code is None and "area_type_code" in self.model_fields_set:
            _dict['area_type_code'] = None

        # set to None if area_code (nullable) is None
        # and model_fields_set contains the field
        if self.area_code is None and "area_code" in self.model_fields_set:
            _dict['area_code'] = None

        # set to None if area_name (nullable) is None
        # and model_fields_set contains the field
        if self.area_name is None and "area_name" in self.model_fields_set:
            _dict['area_name'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if address_text (nullable) is None
        # and model_fields_set contains the field
        if self.address_text is None and "address_text" in self.model_fields_set:
            _dict['address_text'] = None

        # set to None if postcode (nullable) is None
        # and model_fields_set contains the field
        if self.postcode is None and "postcode" in self.model_fields_set:
            _dict['postcode'] = None

        # set to None if extra_properties (nullable) is None
        # and model_fields_set contains the field
        if self.extra_properties is None and "extra_properties" in self.model_fields_set:
            _dict['extra_properties'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['created_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NestedLocationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "stadsdeel": obj.get("stadsdeel"),
            "buurt_code": obj.get("buurt_code"),
            "area_type_code": obj.get("area_type_code"),
            "area_code": obj.get("area_code"),
            "area_name": obj.get("area_name"),
            "address": obj.get("address"),
            "address_text": obj.get("address_text"),
            "postcode": obj.get("postcode"),
            "geometrie": NestedLocationModelGeometrie.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "extra_properties": obj.get("extra_properties"),
            "created_by": obj.get("created_by"),
            "bag_validated": obj.get("bag_validated")
        })
        return _obj


