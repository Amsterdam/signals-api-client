# coding: utf-8

"""
    Signalen API

    One of the tasks of a municipality is to maintain public spaces. When citizens have complaints about public spaces they can leave these complaints with the municipality. Signalen (SIG) receives these complaints and is used to track progress towards their resolution. SIG provides an API that is used both by the SIG frontend and external systems that integrate with SIG.

    The version of the OpenAPI document: 2.41.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from signals_api_client.models.nested_category_model import NestedCategoryModel
from signals_api_client.models.nested_location_model import NestedLocationModel
from signals_api_client.models.nested_reporter_model import NestedReporterModel
from typing import Optional, Set
from typing_extensions import Self

class PublicSignalCreate(BaseModel):
    """
    This serializer allows anonymous users to report `signals.Signals`.  Note: this is only used in the creation of new Signal instances, not to create the response body after a succesfull POST.
    """ # noqa: E501
    source: Optional[StrictStr] = 'online'
    text: Annotated[str, Field(strict=True, max_length=3000)]
    text_extra: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = None
    location: NestedLocationModel
    category: NestedCategoryModel
    reporter: NestedReporterModel
    incident_date_start: datetime
    incident_date_end: Optional[datetime] = None
    extra_properties: Optional[Any] = None
    session: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["source", "text", "text_extra", "location", "category", "reporter", "incident_date_start", "incident_date_end", "extra_properties", "session"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicSignalCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reporter
        if self.reporter:
            _dict['reporter'] = self.reporter.to_dict()
        # set to None if incident_date_end (nullable) is None
        # and model_fields_set contains the field
        if self.incident_date_end is None and "incident_date_end" in self.model_fields_set:
            _dict['incident_date_end'] = None

        # set to None if extra_properties (nullable) is None
        # and model_fields_set contains the field
        if self.extra_properties is None and "extra_properties" in self.model_fields_set:
            _dict['extra_properties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicSignalCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": obj.get("source") if obj.get("source") is not None else 'online',
            "text": obj.get("text"),
            "text_extra": obj.get("text_extra"),
            "location": NestedLocationModel.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "category": NestedCategoryModel.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "reporter": NestedReporterModel.from_dict(obj["reporter"]) if obj.get("reporter") is not None else None,
            "incident_date_start": obj.get("incident_date_start"),
            "incident_date_end": obj.get("incident_date_end"),
            "extra_properties": obj.get("extra_properties"),
            "session": obj.get("session")
        })
        return _obj


