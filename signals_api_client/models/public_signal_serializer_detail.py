# coding: utf-8

"""
    Signalen API

    One of the tasks of a municipality is to maintain public spaces. When citizens have complaints about public spaces they can leave these complaints with the municipality. Signalen (SIG) receives these complaints and is used to track progress towards their resolution. SIG provides an API that is used both by the SIG frontend and external systems that integrate with SIG.

    The version of the OpenAPI document: 2.41.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from signals_api_client.models.nested_public_status_model import NestedPublicStatusModel
from typing import Optional, Set
from typing_extensions import Self

class PublicSignalSerializerDetail(BaseModel):
    """
    PublicSignalSerializerDetail
    """ # noqa: E501
    display: StrictStr = Field(alias="_display")
    id: StrictInt
    id_display: StrictStr
    signal_id: StrictStr
    status: Optional[NestedPublicStatusModel] = None
    created_at: datetime
    updated_at: datetime
    incident_date_start: datetime
    incident_date_end: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["_display", "id", "id_display", "signal_id", "status", "created_at", "updated_at", "incident_date_start", "incident_date_end"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicSignalSerializerDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display",
            "id",
            "id_display",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if incident_date_end (nullable) is None
        # and model_fields_set contains the field
        if self.incident_date_end is None and "incident_date_end" in self.model_fields_set:
            _dict['incident_date_end'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicSignalSerializerDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_display": obj.get("_display"),
            "id": obj.get("id"),
            "id_display": obj.get("id_display"),
            "signal_id": obj.get("signal_id"),
            "status": NestedPublicStatusModel.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "incident_date_start": obj.get("incident_date_start"),
            "incident_date_end": obj.get("incident_date_end")
        })
        return _obj


