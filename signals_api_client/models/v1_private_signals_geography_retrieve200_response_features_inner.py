# coding: utf-8

"""
    Signalen API

    One of the tasks of a municipality is to maintain public spaces. When citizens have complaints about public spaces they can leave these complaints with the municipality. Signalen (SIG) receives these complaints and is used to track progress towards their resolution. SIG provides an API that is used both by the SIG frontend and external systems that integrate with SIG.

    The version of the OpenAPI document: 2.41.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from signals_api_client.models.v1_private_signals_context_near_geography_retrieve200_response_features_inner_geometry import V1PrivateSignalsContextNearGeographyRetrieve200ResponseFeaturesInnerGeometry
from signals_api_client.models.v1_private_signals_geography_retrieve200_response_features_inner_properties import V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInnerProperties
from typing import Optional, Set
from typing_extensions import Self

class V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInner(BaseModel):
    """
    V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInner
    """ # noqa: E501
    type: Optional[StrictStr] = None
    geometry: Optional[V1PrivateSignalsContextNearGeographyRetrieve200ResponseFeaturesInnerGeometry] = None
    properties: Optional[V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInnerProperties] = None
    __properties: ClassVar[List[str]] = ["type", "geometry", "properties"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Feature']):
            raise ValueError("must be one of enum values ('Feature')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "geometry": V1PrivateSignalsContextNearGeographyRetrieve200ResponseFeaturesInnerGeometry.from_dict(obj["geometry"]) if obj.get("geometry") is not None else None,
            "properties": V1PrivateSignalsGeographyRetrieve200ResponseFeaturesInnerProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None
        })
        return _obj


